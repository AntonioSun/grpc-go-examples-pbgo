// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hello.proto

package hello_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/chai2010/pbgo"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import (
	context1 "context"
	encoding_json "encoding/json"
	io "io"
	io_ioutil "io/ioutil"
	net_http "net/http"
	net_rpc "net/rpc"
	regexp "regexp"
	strings "strings"

	github_com_chai2010_pbgo "github.com/chai2010/pbgo"
	github_com_julienschmidt_httprouter "github.com/julienschmidt/httprouter"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type String struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *String) Reset()         { *m = String{} }
func (m *String) String() string { return proto.CompactTextString(m) }
func (*String) ProtoMessage()    {}
func (*String) Descriptor() ([]byte, []int) {
	return fileDescriptor_hello_395b6a614344bca1, []int{0}
}
func (m *String) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_String.Unmarshal(m, b)
}
func (m *String) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_String.Marshal(b, m, deterministic)
}
func (dst *String) XXX_Merge(src proto.Message) {
	xxx_messageInfo_String.Merge(dst, src)
}
func (m *String) XXX_Size() int {
	return xxx_messageInfo_String.Size(m)
}
func (m *String) XXX_DiscardUnknown() {
	xxx_messageInfo_String.DiscardUnknown(m)
}

var xxx_messageInfo_String proto.InternalMessageInfo

func (m *String) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type StaticFile struct {
	ContentType          string   `protobuf:"bytes,1,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	ContentBody          []byte   `protobuf:"bytes,2,opt,name=content_body,json=contentBody,proto3" json:"content_body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StaticFile) Reset()         { *m = StaticFile{} }
func (m *StaticFile) String() string { return proto.CompactTextString(m) }
func (*StaticFile) ProtoMessage()    {}
func (*StaticFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_hello_395b6a614344bca1, []int{1}
}
func (m *StaticFile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StaticFile.Unmarshal(m, b)
}
func (m *StaticFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StaticFile.Marshal(b, m, deterministic)
}
func (dst *StaticFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StaticFile.Merge(dst, src)
}
func (m *StaticFile) XXX_Size() int {
	return xxx_messageInfo_StaticFile.Size(m)
}
func (m *StaticFile) XXX_DiscardUnknown() {
	xxx_messageInfo_StaticFile.DiscardUnknown(m)
}

var xxx_messageInfo_StaticFile proto.InternalMessageInfo

func (m *StaticFile) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *StaticFile) GetContentBody() []byte {
	if m != nil {
		return m.ContentBody
	}
	return nil
}

type Message struct {
	Value                string            `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Array                []int32           `protobuf:"varint,2,rep,packed,name=array,proto3" json:"array,omitempty"`
	Dict                 map[string]string `protobuf:"bytes,3,rep,name=dict,proto3" json:"dict,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Subfiled             *String           `protobuf:"bytes,4,opt,name=subfiled,proto3" json:"subfiled,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_hello_395b6a614344bca1, []int{2}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (dst *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(dst, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Message) GetArray() []int32 {
	if m != nil {
		return m.Array
	}
	return nil
}

func (m *Message) GetDict() map[string]string {
	if m != nil {
		return m.Dict
	}
	return nil
}

func (m *Message) GetSubfiled() *String {
	if m != nil {
		return m.Subfiled
	}
	return nil
}

func init() {
	proto.RegisterType((*String)(nil), "hello_pb.String")
	proto.RegisterType((*StaticFile)(nil), "hello_pb.StaticFile")
	proto.RegisterType((*Message)(nil), "hello_pb.Message")
	proto.RegisterMapType((map[string]string)(nil), "hello_pb.Message.DictEntry")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HelloServiceClient is the client API for HelloService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HelloServiceClient interface {
	Hello(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error)
	Echo(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	Static(ctx context.Context, in *String, opts ...grpc.CallOption) (*StaticFile, error)
	ServerStream(ctx context.Context, in *String, opts ...grpc.CallOption) (HelloService_ServerStreamClient, error)
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (HelloService_ClientStreamClient, error)
	Channel(ctx context.Context, opts ...grpc.CallOption) (HelloService_ChannelClient, error)
}

type helloServiceClient struct {
	cc *grpc.ClientConn
}

func NewHelloServiceClient(cc *grpc.ClientConn) HelloServiceClient {
	return &helloServiceClient{cc}
}

func (c *helloServiceClient) Hello(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/hello_pb.HelloService/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloServiceClient) Echo(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/hello_pb.HelloService/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloServiceClient) Static(ctx context.Context, in *String, opts ...grpc.CallOption) (*StaticFile, error) {
	out := new(StaticFile)
	err := c.cc.Invoke(ctx, "/hello_pb.HelloService/Static", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloServiceClient) ServerStream(ctx context.Context, in *String, opts ...grpc.CallOption) (HelloService_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HelloService_serviceDesc.Streams[0], "/hello_pb.HelloService/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloServiceServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HelloService_ServerStreamClient interface {
	Recv() (*String, error)
	grpc.ClientStream
}

type helloServiceServerStreamClient struct {
	grpc.ClientStream
}

func (x *helloServiceServerStreamClient) Recv() (*String, error) {
	m := new(String)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloServiceClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (HelloService_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HelloService_serviceDesc.Streams[1], "/hello_pb.HelloService/ClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloServiceClientStreamClient{stream}
	return x, nil
}

type HelloService_ClientStreamClient interface {
	Send(*String) error
	CloseAndRecv() (*String, error)
	grpc.ClientStream
}

type helloServiceClientStreamClient struct {
	grpc.ClientStream
}

func (x *helloServiceClientStreamClient) Send(m *String) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloServiceClientStreamClient) CloseAndRecv() (*String, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(String)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloServiceClient) Channel(ctx context.Context, opts ...grpc.CallOption) (HelloService_ChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HelloService_serviceDesc.Streams[2], "/hello_pb.HelloService/Channel", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloServiceChannelClient{stream}
	return x, nil
}

type HelloService_ChannelClient interface {
	Send(*String) error
	Recv() (*String, error)
	grpc.ClientStream
}

type helloServiceChannelClient struct {
	grpc.ClientStream
}

func (x *helloServiceChannelClient) Send(m *String) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloServiceChannelClient) Recv() (*String, error) {
	m := new(String)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloServiceServer is the server API for HelloService service.
type HelloServiceServer interface {
	Hello(context.Context, *String) (*String, error)
	Echo(context.Context, *Message) (*Message, error)
	Static(context.Context, *String) (*StaticFile, error)
	ServerStream(*String, HelloService_ServerStreamServer) error
	ClientStream(HelloService_ClientStreamServer) error
	Channel(HelloService_ChannelServer) error
}

func RegisterHelloServiceServer(s *grpc.Server, srv HelloServiceServer) {
	s.RegisterService(&_HelloService_serviceDesc, srv)
}

func _HelloService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hello_pb.HelloService/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServiceServer).Hello(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hello_pb.HelloService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServiceServer).Echo(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloService_Static_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServiceServer).Static(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hello_pb.HelloService/Static",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServiceServer).Static(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloService_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(String)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelloServiceServer).ServerStream(m, &helloServiceServerStreamServer{stream})
}

type HelloService_ServerStreamServer interface {
	Send(*String) error
	grpc.ServerStream
}

type helloServiceServerStreamServer struct {
	grpc.ServerStream
}

func (x *helloServiceServerStreamServer) Send(m *String) error {
	return x.ServerStream.SendMsg(m)
}

func _HelloService_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloServiceServer).ClientStream(&helloServiceClientStreamServer{stream})
}

type HelloService_ClientStreamServer interface {
	SendAndClose(*String) error
	Recv() (*String, error)
	grpc.ServerStream
}

type helloServiceClientStreamServer struct {
	grpc.ServerStream
}

func (x *helloServiceClientStreamServer) SendAndClose(m *String) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloServiceClientStreamServer) Recv() (*String, error) {
	m := new(String)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HelloService_Channel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloServiceServer).Channel(&helloServiceChannelServer{stream})
}

type HelloService_ChannelServer interface {
	Send(*String) error
	Recv() (*String, error)
	grpc.ServerStream
}

type helloServiceChannelServer struct {
	grpc.ServerStream
}

func (x *helloServiceChannelServer) Send(m *String) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloServiceChannelServer) Recv() (*String, error) {
	m := new(String)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _HelloService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hello_pb.HelloService",
	HandlerType: (*HelloServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _HelloService_Hello_Handler,
		},
		{
			MethodName: "Echo",
			Handler:    _HelloService_Echo_Handler,
		},
		{
			MethodName: "Static",
			Handler:    _HelloService_Static_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStream",
			Handler:       _HelloService_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStream",
			Handler:       _HelloService_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Channel",
			Handler:       _HelloService_Channel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "hello.proto",
}

// Reference imports to suppress errors if they are not otherwise used.
var _ = context1.Background
var _ = encoding_json.Marshal
var _ = net_rpc.Server{}
var _ = net_http.ListenAndServe
var _ = io.EOF
var _ = io_ioutil.ReadAll
var _ = regexp.Match
var _ = strings.Split
var _ = github_com_chai2010_pbgo.PopulateFieldFromPath
var _ = github_com_julienschmidt_httprouter.New

type PBGOHelloServiceInterface interface {
	Hello(in *String, out *String) error
	Echo(in *Message, out *Message) error
	Static(in *String, out *StaticFile) error
}

type PBGOHelloServiceGrpcInterface interface {
	Hello(ctx context1.Context, in *String) (out *String, err error)
	Echo(ctx context1.Context, in *Message) (out *Message, err error)
	Static(ctx context1.Context, in *String) (out *StaticFile, err error)
}

func RegisterPBGOHelloService(srv *net_rpc.Server, x PBGOHelloServiceInterface) error {
	if _, ok := x.(*PBGOHelloServiceValidator); !ok {
		x = &PBGOHelloServiceValidator{PBGOHelloServiceInterface: x}
	}

	if err := srv.RegisterName("PBGOHelloService", x); err != nil {
		return err
	}
	return nil
}

type PBGOHelloServiceValidator struct {
	PBGOHelloServiceInterface
}

func (p *PBGOHelloServiceValidator) Hello(in *String, out *String) error {
	if x, ok := proto.Message(in).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			return err
		}
	}

	if err := p.PBGOHelloServiceInterface.Hello(in, out); err != nil {
		return err
	}

	if x, ok := proto.Message(out).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			return err
		}
	}

	return nil
}

func (p *PBGOHelloServiceValidator) Echo(in *Message, out *Message) error {
	if x, ok := proto.Message(in).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			return err
		}
	}

	if err := p.PBGOHelloServiceInterface.Echo(in, out); err != nil {
		return err
	}

	if x, ok := proto.Message(out).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			return err
		}
	}

	return nil
}

func (p *PBGOHelloServiceValidator) Static(in *String, out *StaticFile) error {
	if x, ok := proto.Message(in).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			return err
		}
	}

	if err := p.PBGOHelloServiceInterface.Static(in, out); err != nil {
		return err
	}

	if x, ok := proto.Message(out).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			return err
		}
	}

	return nil
}

type PBGOHelloServiceClient struct {
	*net_rpc.Client
}

func DialPBGOHelloService(network, address string) (*PBGOHelloServiceClient, error) {
	c, err := net_rpc.Dial(network, address)
	if err != nil {
		return nil, err
	}
	return &PBGOHelloServiceClient{Client: c}, nil
}

func (p *PBGOHelloServiceClient) Hello(in *String) (*String, error) {
	if x, ok := proto.Message(in).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}

	var out = new(String)
	if err := p.Client.Call("PBGOHelloService.Hello", in, out); err != nil {
		return nil, err
	}

	if x, ok := proto.Message(out).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}

	return out, nil
}
func (p *PBGOHelloServiceClient) AsyncHello(in *String, out *String, done chan *net_rpc.Call) *net_rpc.Call {
	if x, ok := proto.Message(in).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			call := &net_rpc.Call{
				ServiceMethod: "PBGOHelloService.Hello",
				Args:          in,
				Reply:         out,
				Error:         err,
				Done:          make(chan *net_rpc.Call, 10),
			}
			call.Done <- call
			return call
		}
	}

	return p.Go(
		"PBGOHelloService.Hello",
		in, out,
		done,
	)
}

func (p *PBGOHelloServiceClient) Echo(in *Message) (*Message, error) {
	if x, ok := proto.Message(in).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}

	var out = new(Message)
	if err := p.Client.Call("PBGOHelloService.Echo", in, out); err != nil {
		return nil, err
	}

	if x, ok := proto.Message(out).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}

	return out, nil
}
func (p *PBGOHelloServiceClient) AsyncEcho(in *Message, out *Message, done chan *net_rpc.Call) *net_rpc.Call {
	if x, ok := proto.Message(in).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			call := &net_rpc.Call{
				ServiceMethod: "PBGOHelloService.Echo",
				Args:          in,
				Reply:         out,
				Error:         err,
				Done:          make(chan *net_rpc.Call, 10),
			}
			call.Done <- call
			return call
		}
	}

	return p.Go(
		"PBGOHelloService.Echo",
		in, out,
		done,
	)
}

func (p *PBGOHelloServiceClient) Static(in *String) (*StaticFile, error) {
	if x, ok := proto.Message(in).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}

	var out = new(StaticFile)
	if err := p.Client.Call("PBGOHelloService.Static", in, out); err != nil {
		return nil, err
	}

	if x, ok := proto.Message(out).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}

	return out, nil
}
func (p *PBGOHelloServiceClient) AsyncStatic(in *String, out *StaticFile, done chan *net_rpc.Call) *net_rpc.Call {
	if x, ok := proto.Message(in).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			call := &net_rpc.Call{
				ServiceMethod: "PBGOHelloService.Static",
				Args:          in,
				Reply:         out,
				Error:         err,
				Done:          make(chan *net_rpc.Call, 10),
			}
			call.Done <- call
			return call
		}
	}

	return p.Go(
		"PBGOHelloService.Static",
		in, out,
		done,
	)
}

func PBGOHelloServiceHandler(svc PBGOHelloServiceInterface) net_http.Handler {
	var router = github_com_julienschmidt_httprouter.New()

	var re = regexp.MustCompile("(\\*|\\:)(\\w|\\.)+")
	_ = re

	router.Handle("DELETE", "/hello",
		func(w net_http.ResponseWriter, r *net_http.Request, ps github_com_julienschmidt_httprouter.Params) {
			var (
				protoReq   String
				protoReply String
			)

			if err := github_com_chai2010_pbgo.PopulateQueryParameters(&protoReq, r.URL.Query()); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusBadRequest)
				return
			}

			if x, ok := proto.Message(&protoReq).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if err := svc.Hello(&protoReq, &protoReply); err != nil {
				if pbgoErr, ok := err.(github_com_chai2010_pbgo.Error); ok {
					net_http.Error(w, pbgoErr.Text(), pbgoErr.HttpStatus())
					return
				} else {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if x, ok := proto.Message(&protoReply).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if strings.Contains(r.Header.Get("Accept"), "application/json") {
				w.Header().Set("Content-Type", "application/json")
			} else {
				w.Header().Set("Content-Type", "text/plain")
			}

			if err := encoding_json.NewEncoder(w).Encode(&protoReply); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
				return
			}
		},
	)

	router.Handle("GET", "/hello/:value",
		func(w net_http.ResponseWriter, r *net_http.Request, ps github_com_julienschmidt_httprouter.Params) {
			var (
				protoReq   String
				protoReply String
			)

			for _, fieldPath := range re.FindAllString("/hello/:value", -1) {
				fieldPath := strings.TrimLeft(fieldPath, ":*")
				err := github_com_chai2010_pbgo.PopulateFieldFromPath(&protoReq, fieldPath, ps.ByName(fieldPath))
				if err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if err := github_com_chai2010_pbgo.PopulateQueryParameters(&protoReq, r.URL.Query()); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusBadRequest)
				return
			}

			if x, ok := proto.Message(&protoReq).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if err := svc.Hello(&protoReq, &protoReply); err != nil {
				if pbgoErr, ok := err.(github_com_chai2010_pbgo.Error); ok {
					net_http.Error(w, pbgoErr.Text(), pbgoErr.HttpStatus())
					return
				} else {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if x, ok := proto.Message(&protoReply).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if strings.Contains(r.Header.Get("Accept"), "application/json") {
				w.Header().Set("Content-Type", "application/json")
			} else {
				w.Header().Set("Content-Type", "text/plain")
			}

			if err := encoding_json.NewEncoder(w).Encode(&protoReply); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
				return
			}
		},
	)

	router.Handle("PATCH", "/hello",
		func(w net_http.ResponseWriter, r *net_http.Request, ps github_com_julienschmidt_httprouter.Params) {
			var (
				protoReq   String
				protoReply String
			)

			if err := github_com_chai2010_pbgo.PopulateQueryParameters(&protoReq, r.URL.Query()); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusBadRequest)
				return
			}

			if err := encoding_json.NewDecoder(r.Body).Decode(&protoReq); err != nil && err != io.EOF {
				net_http.Error(w, err.Error(), net_http.StatusBadRequest)
				return
			}

			if x, ok := proto.Message(&protoReq).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if err := svc.Hello(&protoReq, &protoReply); err != nil {
				if pbgoErr, ok := err.(github_com_chai2010_pbgo.Error); ok {
					net_http.Error(w, pbgoErr.Text(), pbgoErr.HttpStatus())
					return
				} else {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if x, ok := proto.Message(&protoReply).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if strings.Contains(r.Header.Get("Accept"), "application/json") {
				w.Header().Set("Content-Type", "application/json")
			} else {
				w.Header().Set("Content-Type", "text/plain")
			}

			if err := encoding_json.NewEncoder(w).Encode(&protoReply); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
				return
			}
		},
	)

	router.Handle("POST", "/hello",
		func(w net_http.ResponseWriter, r *net_http.Request, ps github_com_julienschmidt_httprouter.Params) {
			var (
				protoReq   String
				protoReply String
			)

			if err := github_com_chai2010_pbgo.PopulateQueryParameters(&protoReq, r.URL.Query()); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusBadRequest)
				return
			}

			if err := encoding_json.NewDecoder(r.Body).Decode(&protoReq); err != nil && err != io.EOF {
				net_http.Error(w, err.Error(), net_http.StatusBadRequest)
				return
			}

			if x, ok := proto.Message(&protoReq).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if err := svc.Hello(&protoReq, &protoReply); err != nil {
				if pbgoErr, ok := err.(github_com_chai2010_pbgo.Error); ok {
					net_http.Error(w, pbgoErr.Text(), pbgoErr.HttpStatus())
					return
				} else {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if x, ok := proto.Message(&protoReply).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if strings.Contains(r.Header.Get("Accept"), "application/json") {
				w.Header().Set("Content-Type", "application/json")
			} else {
				w.Header().Set("Content-Type", "text/plain")
			}

			if err := encoding_json.NewEncoder(w).Encode(&protoReply); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
				return
			}
		},
	)

	router.Handle("GET", "/echo/:subfiled.value",
		func(w net_http.ResponseWriter, r *net_http.Request, ps github_com_julienschmidt_httprouter.Params) {
			var (
				protoReq   Message
				protoReply Message
			)

			for _, fieldPath := range re.FindAllString("/echo/:subfiled.value", -1) {
				fieldPath := strings.TrimLeft(fieldPath, ":*")
				err := github_com_chai2010_pbgo.PopulateFieldFromPath(&protoReq, fieldPath, ps.ByName(fieldPath))
				if err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if err := github_com_chai2010_pbgo.PopulateQueryParameters(&protoReq, r.URL.Query()); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusBadRequest)
				return
			}

			if x, ok := proto.Message(&protoReq).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if err := svc.Echo(&protoReq, &protoReply); err != nil {
				if pbgoErr, ok := err.(github_com_chai2010_pbgo.Error); ok {
					net_http.Error(w, pbgoErr.Text(), pbgoErr.HttpStatus())
					return
				} else {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if x, ok := proto.Message(&protoReply).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if strings.Contains(r.Header.Get("Accept"), "application/json") {
				w.Header().Set("Content-Type", "application/json")
			} else {
				w.Header().Set("Content-Type", "text/plain")
			}

			if err := encoding_json.NewEncoder(w).Encode(&protoReply); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
				return
			}
		},
	)

	router.Handle("GET", "/static/:value",
		func(w net_http.ResponseWriter, r *net_http.Request, ps github_com_julienschmidt_httprouter.Params) {
			var (
				protoReq   String
				protoReply StaticFile
			)

			for _, fieldPath := range re.FindAllString("/static/:value", -1) {
				fieldPath := strings.TrimLeft(fieldPath, ":*")
				err := github_com_chai2010_pbgo.PopulateFieldFromPath(&protoReq, fieldPath, ps.ByName(fieldPath))
				if err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if err := github_com_chai2010_pbgo.PopulateQueryParameters(&protoReq, r.URL.Query()); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusBadRequest)
				return
			}

			if x, ok := proto.Message(&protoReq).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if err := svc.Static(&protoReq, &protoReply); err != nil {
				if pbgoErr, ok := err.(github_com_chai2010_pbgo.Error); ok {
					net_http.Error(w, pbgoErr.Text(), pbgoErr.HttpStatus())
					return
				} else {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if x, ok := proto.Message(&protoReply).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			w.Header().Set("Content-Type", protoReply.ContentType)

			if _, err := w.Write(protoReply.ContentBody); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
				return
			}
		},
	)

	return router
}

func PBGOHelloServiceGrpcHandler(
	ctx context1.Context, svc PBGOHelloServiceGrpcInterface,
	fnAnnotateContext func(ctx context1.Context, req *net_http.Request, methodName string) (context1.Context, error),
) net_http.Handler {
	var router = github_com_julienschmidt_httprouter.New()

	var re = regexp.MustCompile("(\\*|\\:)(\\w|\\.)+")
	_ = re

	router.Handle("DELETE", "/hello",
		func(w net_http.ResponseWriter, r *net_http.Request, ps github_com_julienschmidt_httprouter.Params) {
			var (
				protoReq   String
				protoReply *String
				err        error
			)

			if err := github_com_chai2010_pbgo.PopulateQueryParameters(&protoReq, r.URL.Query()); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusBadRequest)
				return
			}

			if x, ok := proto.Message(&protoReq).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if fnAnnotateContext != nil {
				var err error
				ctx, err = fnAnnotateContext(ctx, r, "HelloService.Hello")
				if err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if protoReply, err = svc.Hello(ctx, &protoReq); err != nil {
				if pbgoErr, ok := err.(github_com_chai2010_pbgo.Error); ok {
					net_http.Error(w, pbgoErr.Text(), pbgoErr.HttpStatus())
					return
				} else {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if x, ok := proto.Message(protoReply).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if strings.Contains(r.Header.Get("Accept"), "application/json") {
				w.Header().Set("Content-Type", "application/json")
			} else {
				w.Header().Set("Content-Type", "text/plain")
			}

			if err := encoding_json.NewEncoder(w).Encode(&protoReply); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
				return
			}
		},
	)

	router.Handle("GET", "/hello/:value",
		func(w net_http.ResponseWriter, r *net_http.Request, ps github_com_julienschmidt_httprouter.Params) {
			var (
				protoReq   String
				protoReply *String
				err        error
			)

			for _, fieldPath := range re.FindAllString("/hello/:value", -1) {
				fieldPath := strings.TrimLeft(fieldPath, ":*")
				err := github_com_chai2010_pbgo.PopulateFieldFromPath(&protoReq, fieldPath, ps.ByName(fieldPath))
				if err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if err := github_com_chai2010_pbgo.PopulateQueryParameters(&protoReq, r.URL.Query()); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusBadRequest)
				return
			}

			if x, ok := proto.Message(&protoReq).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if fnAnnotateContext != nil {
				var err error
				ctx, err = fnAnnotateContext(ctx, r, "HelloService.Hello")
				if err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if protoReply, err = svc.Hello(ctx, &protoReq); err != nil {
				if pbgoErr, ok := err.(github_com_chai2010_pbgo.Error); ok {
					net_http.Error(w, pbgoErr.Text(), pbgoErr.HttpStatus())
					return
				} else {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if x, ok := proto.Message(protoReply).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if strings.Contains(r.Header.Get("Accept"), "application/json") {
				w.Header().Set("Content-Type", "application/json")
			} else {
				w.Header().Set("Content-Type", "text/plain")
			}

			if err := encoding_json.NewEncoder(w).Encode(&protoReply); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
				return
			}
		},
	)

	router.Handle("PATCH", "/hello",
		func(w net_http.ResponseWriter, r *net_http.Request, ps github_com_julienschmidt_httprouter.Params) {
			var (
				protoReq   String
				protoReply *String
				err        error
			)

			if err := github_com_chai2010_pbgo.PopulateQueryParameters(&protoReq, r.URL.Query()); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusBadRequest)
				return
			}

			if err := encoding_json.NewDecoder(r.Body).Decode(&protoReq); err != nil && err != io.EOF {
				net_http.Error(w, err.Error(), net_http.StatusBadRequest)
				return
			}

			if x, ok := proto.Message(&protoReq).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if fnAnnotateContext != nil {
				var err error
				ctx, err = fnAnnotateContext(ctx, r, "HelloService.Hello")
				if err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if protoReply, err = svc.Hello(ctx, &protoReq); err != nil {
				if pbgoErr, ok := err.(github_com_chai2010_pbgo.Error); ok {
					net_http.Error(w, pbgoErr.Text(), pbgoErr.HttpStatus())
					return
				} else {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if x, ok := proto.Message(protoReply).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if strings.Contains(r.Header.Get("Accept"), "application/json") {
				w.Header().Set("Content-Type", "application/json")
			} else {
				w.Header().Set("Content-Type", "text/plain")
			}

			if err := encoding_json.NewEncoder(w).Encode(&protoReply); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
				return
			}
		},
	)

	router.Handle("POST", "/hello",
		func(w net_http.ResponseWriter, r *net_http.Request, ps github_com_julienschmidt_httprouter.Params) {
			var (
				protoReq   String
				protoReply *String
				err        error
			)

			if err := github_com_chai2010_pbgo.PopulateQueryParameters(&protoReq, r.URL.Query()); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusBadRequest)
				return
			}

			if err := encoding_json.NewDecoder(r.Body).Decode(&protoReq); err != nil && err != io.EOF {
				net_http.Error(w, err.Error(), net_http.StatusBadRequest)
				return
			}

			if x, ok := proto.Message(&protoReq).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if fnAnnotateContext != nil {
				var err error
				ctx, err = fnAnnotateContext(ctx, r, "HelloService.Hello")
				if err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if protoReply, err = svc.Hello(ctx, &protoReq); err != nil {
				if pbgoErr, ok := err.(github_com_chai2010_pbgo.Error); ok {
					net_http.Error(w, pbgoErr.Text(), pbgoErr.HttpStatus())
					return
				} else {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if x, ok := proto.Message(protoReply).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if strings.Contains(r.Header.Get("Accept"), "application/json") {
				w.Header().Set("Content-Type", "application/json")
			} else {
				w.Header().Set("Content-Type", "text/plain")
			}

			if err := encoding_json.NewEncoder(w).Encode(&protoReply); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
				return
			}
		},
	)

	router.Handle("GET", "/echo/:subfiled.value",
		func(w net_http.ResponseWriter, r *net_http.Request, ps github_com_julienschmidt_httprouter.Params) {
			var (
				protoReq   Message
				protoReply *Message
				err        error
			)

			for _, fieldPath := range re.FindAllString("/echo/:subfiled.value", -1) {
				fieldPath := strings.TrimLeft(fieldPath, ":*")
				err := github_com_chai2010_pbgo.PopulateFieldFromPath(&protoReq, fieldPath, ps.ByName(fieldPath))
				if err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if err := github_com_chai2010_pbgo.PopulateQueryParameters(&protoReq, r.URL.Query()); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusBadRequest)
				return
			}

			if x, ok := proto.Message(&protoReq).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if fnAnnotateContext != nil {
				var err error
				ctx, err = fnAnnotateContext(ctx, r, "HelloService.Echo")
				if err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if protoReply, err = svc.Echo(ctx, &protoReq); err != nil {
				if pbgoErr, ok := err.(github_com_chai2010_pbgo.Error); ok {
					net_http.Error(w, pbgoErr.Text(), pbgoErr.HttpStatus())
					return
				} else {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if x, ok := proto.Message(protoReply).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if strings.Contains(r.Header.Get("Accept"), "application/json") {
				w.Header().Set("Content-Type", "application/json")
			} else {
				w.Header().Set("Content-Type", "text/plain")
			}

			if err := encoding_json.NewEncoder(w).Encode(&protoReply); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
				return
			}
		},
	)

	router.Handle("GET", "/static/:value",
		func(w net_http.ResponseWriter, r *net_http.Request, ps github_com_julienschmidt_httprouter.Params) {
			var (
				protoReq   String
				protoReply *StaticFile
				err        error
			)

			for _, fieldPath := range re.FindAllString("/static/:value", -1) {
				fieldPath := strings.TrimLeft(fieldPath, ":*")
				err := github_com_chai2010_pbgo.PopulateFieldFromPath(&protoReq, fieldPath, ps.ByName(fieldPath))
				if err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if err := github_com_chai2010_pbgo.PopulateQueryParameters(&protoReq, r.URL.Query()); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusBadRequest)
				return
			}

			if x, ok := proto.Message(&protoReq).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if fnAnnotateContext != nil {
				var err error
				ctx, err = fnAnnotateContext(ctx, r, "HelloService.Static")
				if err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if protoReply, err = svc.Static(ctx, &protoReq); err != nil {
				if pbgoErr, ok := err.(github_com_chai2010_pbgo.Error); ok {
					net_http.Error(w, pbgoErr.Text(), pbgoErr.HttpStatus())
					return
				} else {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if x, ok := proto.Message(protoReply).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			w.Header().Set("Content-Type", protoReply.ContentType)

			if _, err := w.Write(protoReply.ContentBody); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
				return
			}
		},
	)

	return router
}

func init() { proto.RegisterFile("hello.proto", fileDescriptor_hello_395b6a614344bca1) }

var fileDescriptor_hello_395b6a614344bca1 = []byte{
	// 466 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xdd, 0x6e, 0xd3, 0x30,
	0x14, 0x96, 0x9b, 0xb6, 0xdb, 0x4e, 0x3b, 0x28, 0xd6, 0xd0, 0xaa, 0x80, 0x50, 0x09, 0x37, 0xb9,
	0x40, 0x49, 0x97, 0x81, 0x40, 0xb9, 0x41, 0xac, 0x0b, 0x9b, 0xd0, 0x10, 0x53, 0xda, 0xfb, 0x29,
	0x71, 0x4d, 0x63, 0xe1, 0xc5, 0x91, 0xeb, 0x4e, 0xca, 0x43, 0xf2, 0x02, 0x3c, 0xc4, 0xde, 0x00,
	0x09, 0xd9, 0x69, 0xda, 0x4e, 0xed, 0x45, 0x6f, 0xa2, 0x7c, 0x9f, 0xbf, 0xf3, 0xf3, 0x1d, 0x1f,
	0x43, 0x27, 0xa3, 0x9c, 0x0b, 0xaf, 0x90, 0x42, 0x09, 0x7c, 0x68, 0xc0, 0x5d, 0x91, 0xda, 0xef,
	0x66, 0x4c, 0x65, 0x8b, 0xd4, 0x23, 0xe2, 0xde, 0x27, 0x59, 0xc2, 0x82, 0xe1, 0xd9, 0xd0, 0x2f,
	0xd2, 0x99, 0x30, 0x9f, 0x4a, 0xee, 0xbc, 0x81, 0xf6, 0x58, 0x49, 0x96, 0xcf, 0xf0, 0x09, 0xb4,
	0x1e, 0x12, 0xbe, 0xa0, 0x7d, 0x34, 0x40, 0xee, 0x51, 0x5c, 0x01, 0x27, 0x06, 0x18, 0xab, 0x44,
	0x31, 0xf2, 0x8d, 0x71, 0x8a, 0xdf, 0x42, 0x97, 0x88, 0x5c, 0xd1, 0x5c, 0xdd, 0xa9, 0xb2, 0xa8,
	0xa5, 0x9d, 0x25, 0x37, 0x29, 0x8b, 0x27, 0x92, 0x54, 0x4c, 0xcb, 0x7e, 0x63, 0x80, 0xdc, 0xee,
	0x4a, 0x72, 0x21, 0xa6, 0xa5, 0xf3, 0x07, 0xc1, 0xc1, 0x0f, 0x3a, 0x9f, 0x27, 0x33, 0xba, 0xbb,
	0xaa, 0x66, 0x13, 0x29, 0x13, 0x1d, 0x6d, 0xb9, 0xad, 0xb8, 0x02, 0xd8, 0x87, 0xe6, 0x94, 0x11,
	0xd5, 0xb7, 0x06, 0x96, 0xdb, 0x09, 0x5e, 0x79, 0xb5, 0x53, 0x6f, 0x99, 0xcc, 0xbb, 0x64, 0x44,
	0x45, 0xb9, 0x92, 0x65, 0x6c, 0x84, 0xf8, 0x3d, 0x1c, 0xce, 0x17, 0xe9, 0x2f, 0xc6, 0xe9, 0xb4,
	0xdf, 0x1c, 0x20, 0xb7, 0x13, 0xf4, 0xd6, 0x41, 0x95, 0xed, 0x78, 0xa5, 0xb0, 0x3f, 0xc1, 0xd1,
	0x2a, 0x01, 0xee, 0x81, 0xf5, 0x9b, 0x96, 0xcb, 0xae, 0xf4, 0xef, 0xba, 0xd3, 0xc6, 0x46, 0xa7,
	0x61, 0xe3, 0x33, 0x0a, 0x1e, 0x2d, 0xe8, 0x5e, 0xeb, 0xb4, 0x63, 0x2a, 0x1f, 0x18, 0xa1, 0x98,
	0x43, 0xcb, 0x60, 0xbc, 0x55, 0xce, 0xde, 0x62, 0x9c, 0x2f, 0x7f, 0x1f, 0xff, 0xdd, 0x84, 0x70,
	0xec, 0x9b, 0x03, 0x3f, 0x34, 0x79, 0xed, 0x76, 0x05, 0x83, 0x1e, 0xb4, 0x2f, 0xa3, 0x9b, 0x68,
	0x12, 0xe1, 0x9a, 0x79, 0x0e, 0xad, 0xdb, 0xaf, 0x93, 0xd1, 0x75, 0x4d, 0xe0, 0xef, 0xd0, 0x8c,
	0x48, 0x26, 0xf0, 0x8b, 0xad, 0x81, 0xd8, 0xdb, 0x94, 0xf3, 0x5a, 0x97, 0x3b, 0x85, 0x97, 0x3e,
	0x25, 0x99, 0xf0, 0xc3, 0xda, 0xbd, 0x57, 0x0d, 0x9e, 0xeb, 0x75, 0xd0, 0xd7, 0xbd, 0xa3, 0xf5,
	0x93, 0x4d, 0xa6, 0x5e, 0x09, 0x27, 0xd4, 0xf9, 0x3e, 0x06, 0xe7, 0x60, 0x5d, 0x45, 0x13, 0xfc,
	0xcc, 0x9f, 0x9b, 0xa3, 0xda, 0xc6, 0x71, 0xb8, 0xb9, 0x2f, 0xce, 0x1a, 0xea, 0xdd, 0xc0, 0x1f,
	0xa0, 0xab, 0x47, 0x46, 0xe5, 0x58, 0x49, 0x9a, 0xdc, 0xef, 0x33, 0xae, 0x21, 0xd2, 0x51, 0x23,
	0xce, 0x68, 0xae, 0xf6, 0x8f, 0x72, 0x11, 0x3e, 0x83, 0x83, 0x51, 0x96, 0xe4, 0x39, 0xe5, 0xfb,
	0x05, 0x0c, 0x91, 0x7d, 0xaa, 0xad, 0x61, 0xe8, 0xdd, 0x5e, 0x5c, 0xfd, 0xdc, 0xbc, 0xdf, 0xb4,
	0x6d, 0xde, 0xce, 0xf9, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x00, 0xdd, 0xb5, 0x79, 0x03,
	0x00, 0x00,
}
